// Copyright 2025 Pano Operations Ltd
// This file is part of the Pano Client
//
// Pano is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Pano is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Pano. If not, see <http://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -package=light_client -destination=client_mock.go
//

// Package light_client is a generated GoMock package.
package light_client

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockrpcClient is a mock of rpcClient interface.
type MockrpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockrpcClientMockRecorder
	isgomock struct{}
}

// MockrpcClientMockRecorder is the mock recorder for MockrpcClient.
type MockrpcClientMockRecorder struct {
	mock *MockrpcClient
}

// NewMockrpcClient creates a new mock instance.
func NewMockrpcClient(ctrl *gomock.Controller) *MockrpcClient {
	mock := &MockrpcClient{ctrl: ctrl}
	mock.recorder = &MockrpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrpcClient) EXPECT() *MockrpcClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockrpcClient) Call(result any, method string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{result, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockrpcClientMockRecorder) Call(result, method any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{result, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockrpcClient)(nil).Call), varargs...)
}

// Close mocks base method.
func (m *MockrpcClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockrpcClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockrpcClient)(nil).Close))
}
