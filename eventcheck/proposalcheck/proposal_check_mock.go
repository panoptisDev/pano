// Copyright 2025 Pano Operations Ltd
// This file is part of the Pano Client
//
// Pano is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Pano is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Pano. If not, see <http://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: proposal_check.go
//
// Generated by this command:
//
//	mockgen -source=proposal_check.go -destination=proposal_check_mock.go -package=proposalcheck
//

// Package proposalcheck is a generated GoMock package.
package proposalcheck

import (
	reflect "reflect"

	inter "github.com/panoptisDev/pano/inter"
	hash "github.com/panoptisDev/lachesis-base/hash"
	pos "github.com/panoptisDev/lachesis-base/inter/pos"
	gomock "go.uber.org/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
	isgomock struct{}
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// GetEpochValidators mocks base method.
func (m *MockReader) GetEpochValidators() *pos.Validators {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochValidators")
	ret0, _ := ret[0].(*pos.Validators)
	return ret0
}

// GetEpochValidators indicates an expected call of GetEpochValidators.
func (mr *MockReaderMockRecorder) GetEpochValidators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochValidators", reflect.TypeOf((*MockReader)(nil).GetEpochValidators))
}

// GetEventPayload mocks base method.
func (m *MockReader) GetEventPayload(arg0 hash.Event) inter.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventPayload", arg0)
	ret0, _ := ret[0].(inter.Payload)
	return ret0
}

// GetEventPayload indicates an expected call of GetEventPayload.
func (mr *MockReaderMockRecorder) GetEventPayload(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventPayload", reflect.TypeOf((*MockReader)(nil).GetEventPayload), arg0)
}
