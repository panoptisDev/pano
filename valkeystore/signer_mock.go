// Copyright 2025 Pano Operations Ltd
// This file is part of the Pano Client
//
// Pano is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Pano is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Pano. If not, see <http://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: signer.go
//
// Generated by this command:
//
//	mockgen -source=signer.go -destination=signer_mock.go -package=valkeystore
//

// Package valkeystore is a generated GoMock package.
package valkeystore

import (
	reflect "reflect"

	validatorpk "github.com/panoptisDev/pano/inter/validatorpk"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockSignerAuthority is a mock of SignerAuthority interface.
type MockSignerAuthority struct {
	ctrl     *gomock.Controller
	recorder *MockSignerAuthorityMockRecorder
	isgomock struct{}
}

// MockSignerAuthorityMockRecorder is the mock recorder for MockSignerAuthority.
type MockSignerAuthorityMockRecorder struct {
	mock *MockSignerAuthority
}

// NewMockSignerAuthority creates a new mock instance.
func NewMockSignerAuthority(ctrl *gomock.Controller) *MockSignerAuthority {
	mock := &MockSignerAuthority{ctrl: ctrl}
	mock.recorder = &MockSignerAuthorityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignerAuthority) EXPECT() *MockSignerAuthorityMockRecorder {
	return m.recorder
}

// PublicKey mocks base method.
func (m *MockSignerAuthority) PublicKey() validatorpk.PubKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(validatorpk.PubKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockSignerAuthorityMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockSignerAuthority)(nil).PublicKey))
}

// Sign mocks base method.
func (m *MockSignerAuthority) Sign(digest common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", digest)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSignerAuthorityMockRecorder) Sign(digest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSignerAuthority)(nil).Sign), digest)
}
