// Copyright 2025 Pano Operations Ltd
// This file is part of the Pano Client
//
// Pano is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Pano is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Pano. If not, see <http://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: proposal_sync_state.go
//
// Generated by this command:
//
//	mockgen -source=proposal_sync_state.go -destination=proposal_sync_state_mock.go -package=inter
//

// Package inter is a generated GoMock package.
package inter

import (
	reflect "reflect"

	hash "github.com/panoptisDev/lachesis-base/hash"
	gomock "go.uber.org/mock/gomock"
)

// MockEventReader is a mock of EventReader interface.
type MockEventReader struct {
	ctrl     *gomock.Controller
	recorder *MockEventReaderMockRecorder
	isgomock struct{}
}

// MockEventReaderMockRecorder is the mock recorder for MockEventReader.
type MockEventReaderMockRecorder struct {
	mock *MockEventReader
}

// NewMockEventReader creates a new mock instance.
func NewMockEventReader(ctrl *gomock.Controller) *MockEventReader {
	mock := &MockEventReader{ctrl: ctrl}
	mock.recorder = &MockEventReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventReader) EXPECT() *MockEventReaderMockRecorder {
	return m.recorder
}

// GetEventPayload mocks base method.
func (m *MockEventReader) GetEventPayload(arg0 hash.Event) Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventPayload", arg0)
	ret0, _ := ret[0].(Payload)
	return ret0
}

// GetEventPayload indicates an expected call of GetEventPayload.
func (mr *MockEventReaderMockRecorder) GetEventPayload(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventPayload", reflect.TypeOf((*MockEventReader)(nil).GetEventPayload), arg0)
}
