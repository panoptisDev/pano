// Copyright 2025 Pano Operations Ltd
// This file is part of the Pano Client
//
// Pano is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Pano is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Pano. If not, see <http://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: objstream.go
//
// Generated by this command:
//
//	mockgen -source=objstream.go -destination=objstream_mock.go -package=objstream
//

// Package objstream is a generated GoMock package.
package objstream

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSerializer is a mock of Serializer interface.
type MockSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockSerializerMockRecorder
	isgomock struct{}
}

// MockSerializerMockRecorder is the mock recorder for MockSerializer.
type MockSerializerMockRecorder struct {
	mock *MockSerializer
}

// NewMockSerializer creates a new mock instance.
func NewMockSerializer(ctrl *gomock.Controller) *MockSerializer {
	mock := &MockSerializer{ctrl: ctrl}
	mock.recorder = &MockSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSerializer) EXPECT() *MockSerializerMockRecorder {
	return m.recorder
}

// Serialize mocks base method.
func (m *MockSerializer) Serialize() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockSerializerMockRecorder) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockSerializer)(nil).Serialize))
}

// MockDeserializer is a mock of Deserializer interface.
type MockDeserializer struct {
	ctrl     *gomock.Controller
	recorder *MockDeserializerMockRecorder
	isgomock struct{}
}

// MockDeserializerMockRecorder is the mock recorder for MockDeserializer.
type MockDeserializerMockRecorder struct {
	mock *MockDeserializer
}

// NewMockDeserializer creates a new mock instance.
func NewMockDeserializer(ctrl *gomock.Controller) *MockDeserializer {
	mock := &MockDeserializer{ctrl: ctrl}
	mock.recorder = &MockDeserializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeserializer) EXPECT() *MockDeserializerMockRecorder {
	return m.recorder
}

// Deserialize mocks base method.
func (m *MockDeserializer) Deserialize(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deserialize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deserialize indicates an expected call of Deserialize.
func (mr *MockDeserializerMockRecorder) Deserialize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deserialize", reflect.TypeOf((*MockDeserializer)(nil).Deserialize), arg0)
}
